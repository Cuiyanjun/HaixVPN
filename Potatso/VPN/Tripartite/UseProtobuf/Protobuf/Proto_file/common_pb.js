/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.BaseResponse', null, global);
goog.exportSymbol('proto.Constant', null, global);
goog.exportSymbol('proto.Constant.Command', null, global);
goog.exportSymbol('proto.Constant.Result', null, global);
goog.exportSymbol('proto.MessageInfo', null, global);
goog.exportSymbol('proto.PacketHeader', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Constant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Constant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Constant.displayName = 'proto.Constant';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Constant.prototype.toObject = function(opt_includeInstance) {
  return proto.Constant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Constant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Constant.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Constant}
 */
proto.Constant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Constant;
  return proto.Constant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Constant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Constant}
 */
proto.Constant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Constant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Constant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Constant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Constant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.Constant.Command = {
  CMD_INIT_REQUEST: 266,
  CMD_INIT_RESPONSE: 267,
  CMD_NEED_REGISTER_DEVICE_REQUEST: 268,
  CMD_NEED_REGISTER_DEVICE_RESPONSE: 269,
  CMD_DEVICE_REGISTER_REQUEST: 274,
  CMD_DEVICE_REGISTER_RESPONSE: 275,
  CMD_DEVICE_DELETE_REQUEST: 276,
  CMD_DEVICE_DELETE_RESPONSE: 277,
  CMD_DEVICE_UPDATE_REQUEST: 278,
  CMD_DEVICE_UPDATE_RESPONSE: 279,
  CMD_NODE_LIST_REQUEST: 288,
  CMD_NODE_LIST_RESPONSE: 289,
  CMD_NODE_GEN_REQUEST: 290,
  CMD_NODE_GEN_RESPONSE: 291,
  CMD_NODE_REMOVE_REQUEST: 292,
  CMD_NODE_REMOVE_RESPONSE: 293,
  CMD_NODE_RESET_REQUEST: 294,
  CMD_NODE_RESET_RESPONSE: 295,
  CMD_PLAN_TYPE_LIST_REQUEST: 304,
  CMD_PLAN_TYPE_LIST_RESPONSE: 305,
  CMD_PLAN_TYPE_CREATE_REQUEST: 306,
  CMD_PLAN_TYPE_CREATE_RESPONSE: 307,
  CMD_PLAN_TYPE_DELETE_REQUEST: 308,
  CMD_PLAN_TYPE_DELETE_RESPONSE: 309,
  CMD_PLAN_TYPE_UPDATE_REQUEST: 310,
  CMD_PLAN_TYPE_UPDATE_RESPONSE: 311,
  CMD_PLAN_TYPE_GET_REQUEST: 312,
  CMD_PLAN_TYPE_GET_RESPONSE: 313,
  CMD_PLAN_LIST_REQUEST: 320,
  CMD_PLAN_LIST_RESPONSE: 321,
  CMD_PLAN_CREATE_REQUEST: 322,
  CMD_PLAN_CREATE_RESPONSE: 323,
  CMD_PLAN_DELETE_REQUEST: 324,
  CMD_PLAN_DELETE_RESPONSE: 325,
  CMD_PLAN_UPDATE_REQUEST: 326,
  CMD_PLAN_UPDATE_RESPONSE: 327,
  CMD_PLAN_GET_REQUEST: 328,
  CMD_PLAN_GET_RESPONSE: 329,
  CMD_ECHO_REQUEST: 512,
  CMD_ECHO_RESPONSE: 513,
  CMD_MESSAGE_SEND_REQUEST: 2,
  CMD_MESSAGE_SEND_RESPONSE: 3,
  CMD_MESSAGE_NOTIFY_REQUEST: 4,
  CMD_MESSAGE_NOTIFY_RESPONSE: 5
};

/**
 * @enum {number}
 */
proto.Constant.Result = {
  SUCCESS: 0,
  ERROR_PARAMS: 1,
  ERROR_SERVER: 2,
  ERROR_USERNAME_EXIST: 3,
  ERROR_USERNAME_NOT_EXIST: 4,
  ERROR_FORBIDDEN: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MessageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageInfo.displayName = 'proto.MessageInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getField(msg, 1),
    content: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageInfo}
 */
proto.MessageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageInfo;
  return proto.MessageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageInfo}
 */
proto.MessageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string from_id = 1;
 * @return {string}
 */
proto.MessageInfo.prototype.getFromId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.MessageInfo.prototype.setFromId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.MessageInfo.prototype.clearFromId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageInfo.prototype.hasFromId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string content = 2;
 * @return {string}
 */
proto.MessageInfo.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.MessageInfo.prototype.setContent = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.MessageInfo.prototype.clearContent = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageInfo.prototype.hasContent = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PacketHeader = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PacketHeader, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PacketHeader.displayName = 'proto.PacketHeader';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PacketHeader.prototype.toObject = function(opt_includeInstance) {
  return proto.PacketHeader.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PacketHeader} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PacketHeader.toObject = function(includeInstance, msg) {
  var f, obj = {
    headerId: jspb.Message.getField(msg, 1),
    version: jspb.Message.getField(msg, 2),
    command: jspb.Message.getField(msg, 3),
    result: jspb.Message.getField(msg, 4),
    timestamp: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PacketHeader}
 */
proto.PacketHeader.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PacketHeader;
  return proto.PacketHeader.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PacketHeader} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PacketHeader}
 */
proto.PacketHeader.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeaderId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCommand(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PacketHeader.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PacketHeader.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PacketHeader} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PacketHeader.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string header_id = 1;
 * @return {string}
 */
proto.PacketHeader.prototype.getHeaderId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.PacketHeader.prototype.setHeaderId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.PacketHeader.prototype.clearHeaderId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PacketHeader.prototype.hasHeaderId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 version = 2;
 * @return {number}
 */
proto.PacketHeader.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PacketHeader.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.PacketHeader.prototype.clearVersion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PacketHeader.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 command = 3;
 * @return {number}
 */
proto.PacketHeader.prototype.getCommand = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.PacketHeader.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.PacketHeader.prototype.clearCommand = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PacketHeader.prototype.hasCommand = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 result = 4;
 * @return {number}
 */
proto.PacketHeader.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.PacketHeader.prototype.setResult = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.PacketHeader.prototype.clearResult = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PacketHeader.prototype.hasResult = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 timestamp = 5;
 * @return {number}
 */
proto.PacketHeader.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.PacketHeader.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.PacketHeader.prototype.clearTimestamp = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.PacketHeader.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BaseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BaseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BaseResponse.displayName = 'proto.BaseResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BaseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BaseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BaseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BaseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getField(msg, 1),
    detailCode: jspb.Message.getField(msg, 2),
    isSuccessfully: jspb.Message.getField(msg, 3),
    msg: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BaseResponse}
 */
proto.BaseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BaseResponse;
  return proto.BaseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BaseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BaseResponse}
 */
proto.BaseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDetailCode(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsSuccessfully(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMsg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BaseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BaseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BaseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BaseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional uint32 code = 1;
 * @return {number}
 */
proto.BaseResponse.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BaseResponse.prototype.setCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.BaseResponse.prototype.clearCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BaseResponse.prototype.hasCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 detail_code = 2;
 * @return {number}
 */
proto.BaseResponse.prototype.getDetailCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BaseResponse.prototype.setDetailCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.BaseResponse.prototype.clearDetailCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BaseResponse.prototype.hasDetailCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_successfully = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BaseResponse.prototype.getIsSuccessfully = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.BaseResponse.prototype.setIsSuccessfully = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.BaseResponse.prototype.clearIsSuccessfully = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BaseResponse.prototype.hasIsSuccessfully = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string msg = 4;
 * @return {string}
 */
proto.BaseResponse.prototype.getMsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.BaseResponse.prototype.setMsg = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.BaseResponse.prototype.clearMsg = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.BaseResponse.prototype.hasMsg = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto);
