/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.NODE_GEN_REQUEST', null, global);
goog.exportSymbol('proto.NODE_GEN_RESPONSE', null, global);
goog.exportSymbol('proto.NODE_LIST_REQUEST', null, global);
goog.exportSymbol('proto.NODE_LIST_RESPONSE', null, global);
goog.exportSymbol('proto.NODE_REMOVE_REQUEST', null, global);
goog.exportSymbol('proto.NODE_REMOVE_RESPONSE', null, global);
goog.exportSymbol('proto.NODE_RESET_REQUEST', null, global);
goog.exportSymbol('proto.NODE_RESET_RESPONSE', null, global);
goog.exportSymbol('proto.Node', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Node.displayName = 'proto.Node';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Node} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: jspb.Message.getField(msg, 1),
    port: jspb.Message.getField(msg, 2),
    method: jspb.Message.getField(msg, 3),
    passwd: jspb.Message.getField(msg, 4),
    protocol: jspb.Message.getField(msg, 5),
    obfs: jspb.Message.getField(msg, 6),
    address: jspb.Message.getField(msg, 7),
    sn: jspb.Message.getField(msg, 8),
    city: jspb.Message.getField(msg, 9),
    country: jspb.Message.getField(msg, 10),
    weight: jspb.Message.getField(msg, 11),
    transferEnable: jspb.Message.getField(msg, 12),
    u: jspb.Message.getField(msg, 13),
    d: jspb.Message.getField(msg, 14),
    forbiddenPort: jspb.Message.getField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Node}
 */
proto.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Node;
  return proto.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Node}
 */
proto.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPasswd(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setObfs(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSn(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransferEnable(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setU(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setD(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setForbiddenPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Node.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Node} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Node.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional string user = 1;
 * @return {string}
 */
proto.Node.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Node.prototype.setUser = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Node.prototype.clearUser = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string port = 2;
 * @return {string}
 */
proto.Node.prototype.getPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Node.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Node.prototype.clearPort = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string method = 3;
 * @return {string}
 */
proto.Node.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Node.prototype.setMethod = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.Node.prototype.clearMethod = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasMethod = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string passwd = 4;
 * @return {string}
 */
proto.Node.prototype.getPasswd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Node.prototype.setPasswd = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.Node.prototype.clearPasswd = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasPasswd = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string protocol = 5;
 * @return {string}
 */
proto.Node.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.Node.prototype.setProtocol = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.Node.prototype.clearProtocol = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string obfs = 6;
 * @return {string}
 */
proto.Node.prototype.getObfs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.Node.prototype.setObfs = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.Node.prototype.clearObfs = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasObfs = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string address = 7;
 * @return {string}
 */
proto.Node.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.Node.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.Node.prototype.clearAddress = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string sn = 8;
 * @return {string}
 */
proto.Node.prototype.getSn = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.Node.prototype.setSn = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.Node.prototype.clearSn = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasSn = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string city = 9;
 * @return {string}
 */
proto.Node.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.Node.prototype.setCity = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.Node.prototype.clearCity = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasCity = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string country = 10;
 * @return {string}
 */
proto.Node.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.Node.prototype.setCountry = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.Node.prototype.clearCountry = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 weight = 11;
 * @return {number}
 */
proto.Node.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.Node.prototype.setWeight = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.Node.prototype.clearWeight = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string transfer_enable = 12;
 * @return {string}
 */
proto.Node.prototype.getTransferEnable = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.Node.prototype.setTransferEnable = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.Node.prototype.clearTransferEnable = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasTransferEnable = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 u = 13;
 * @return {number}
 */
proto.Node.prototype.getU = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.Node.prototype.setU = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.Node.prototype.clearU = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasU = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 d = 14;
 * @return {number}
 */
proto.Node.prototype.getD = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.Node.prototype.setD = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.Node.prototype.clearD = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasD = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional string forbidden_port = 15;
 * @return {string}
 */
proto.Node.prototype.getForbiddenPort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/** @param {string} value */
proto.Node.prototype.setForbiddenPort = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.Node.prototype.clearForbiddenPort = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.Node.prototype.hasForbiddenPort = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NODE_GEN_REQUEST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NODE_GEN_REQUEST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NODE_GEN_REQUEST.displayName = 'proto.NODE_GEN_REQUEST';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NODE_GEN_REQUEST.prototype.toObject = function(opt_includeInstance) {
  return proto.NODE_GEN_REQUEST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NODE_GEN_REQUEST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_GEN_REQUEST.toObject = function(includeInstance, msg) {
  var f, obj = {
    requireNumber: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NODE_GEN_REQUEST}
 */
proto.NODE_GEN_REQUEST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NODE_GEN_REQUEST;
  return proto.NODE_GEN_REQUEST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NODE_GEN_REQUEST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NODE_GEN_REQUEST}
 */
proto.NODE_GEN_REQUEST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRequireNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NODE_GEN_REQUEST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NODE_GEN_REQUEST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NODE_GEN_REQUEST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_GEN_REQUEST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 require_number = 1;
 * @return {number}
 */
proto.NODE_GEN_REQUEST.prototype.getRequireNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.NODE_GEN_REQUEST.prototype.setRequireNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NODE_GEN_REQUEST.prototype.clearRequireNumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_GEN_REQUEST.prototype.hasRequireNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NODE_GEN_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NODE_GEN_RESPONSE.repeatedFields_, null);
};
goog.inherits(proto.NODE_GEN_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NODE_GEN_RESPONSE.displayName = 'proto.NODE_GEN_RESPONSE';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NODE_GEN_RESPONSE.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NODE_GEN_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.NODE_GEN_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NODE_GEN_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_GEN_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f),
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NODE_GEN_RESPONSE}
 */
proto.NODE_GEN_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NODE_GEN_RESPONSE;
  return proto.NODE_GEN_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NODE_GEN_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NODE_GEN_RESPONSE}
 */
proto.NODE_GEN_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    case 2:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NODE_GEN_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NODE_GEN_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NODE_GEN_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_GEN_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * required BaseResponse baseResponse = 1;
 * @return {!proto.BaseResponse}
 */
proto.NODE_GEN_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{!proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1, 1));
};


/** @param {!proto.BaseResponse} value */
proto.NODE_GEN_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.NODE_GEN_RESPONSE.prototype.clearBaseresponse = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_GEN_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Node nodes = 2;
 * @return {!Array.<!proto.Node>}
 */
proto.NODE_GEN_RESPONSE.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Node, 2));
};


/** @param {!Array.<!proto.Node>} value */
proto.NODE_GEN_RESPONSE.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Node}
 */
proto.NODE_GEN_RESPONSE.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Node, opt_index);
};


proto.NODE_GEN_RESPONSE.prototype.clearNodesList = function() {
  this.setNodesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NODE_RESET_REQUEST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NODE_RESET_REQUEST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NODE_RESET_REQUEST.displayName = 'proto.NODE_RESET_REQUEST';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NODE_RESET_REQUEST.prototype.toObject = function(opt_includeInstance) {
  return proto.NODE_RESET_REQUEST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NODE_RESET_REQUEST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_RESET_REQUEST.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NODE_RESET_REQUEST}
 */
proto.NODE_RESET_REQUEST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NODE_RESET_REQUEST;
  return proto.NODE_RESET_REQUEST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NODE_RESET_REQUEST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NODE_RESET_REQUEST}
 */
proto.NODE_RESET_REQUEST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NODE_RESET_REQUEST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NODE_RESET_REQUEST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NODE_RESET_REQUEST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_RESET_REQUEST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string id = 1;
 * @return {string}
 */
proto.NODE_RESET_REQUEST.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NODE_RESET_REQUEST.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NODE_RESET_REQUEST.prototype.clearId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_RESET_REQUEST.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NODE_RESET_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NODE_RESET_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NODE_RESET_RESPONSE.displayName = 'proto.NODE_RESET_RESPONSE';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NODE_RESET_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.NODE_RESET_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NODE_RESET_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_RESET_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f),
    node: (f = msg.getNode()) && proto.Node.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NODE_RESET_RESPONSE}
 */
proto.NODE_RESET_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NODE_RESET_RESPONSE;
  return proto.NODE_RESET_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NODE_RESET_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NODE_RESET_RESPONSE}
 */
proto.NODE_RESET_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    case 2:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.setNode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NODE_RESET_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NODE_RESET_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NODE_RESET_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_RESET_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
  f = message.getNode();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * required BaseResponse baseResponse = 1;
 * @return {!proto.BaseResponse}
 */
proto.NODE_RESET_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{!proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1, 1));
};


/** @param {!proto.BaseResponse} value */
proto.NODE_RESET_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.NODE_RESET_RESPONSE.prototype.clearBaseresponse = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_RESET_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Node node = 2;
 * @return {?proto.Node}
 */
proto.NODE_RESET_RESPONSE.prototype.getNode = function() {
  return /** @type{?proto.Node} */ (
    jspb.Message.getWrapperField(this, proto.Node, 2));
};


/** @param {?proto.Node|undefined} value */
proto.NODE_RESET_RESPONSE.prototype.setNode = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.NODE_RESET_RESPONSE.prototype.clearNode = function() {
  this.setNode(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_RESET_RESPONSE.prototype.hasNode = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NODE_REMOVE_REQUEST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NODE_REMOVE_REQUEST.repeatedFields_, null);
};
goog.inherits(proto.NODE_REMOVE_REQUEST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NODE_REMOVE_REQUEST.displayName = 'proto.NODE_REMOVE_REQUEST';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NODE_REMOVE_REQUEST.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NODE_REMOVE_REQUEST.prototype.toObject = function(opt_includeInstance) {
  return proto.NODE_REMOVE_REQUEST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NODE_REMOVE_REQUEST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_REMOVE_REQUEST.toObject = function(includeInstance, msg) {
  var f, obj = {
    idsList: jspb.Message.getRepeatedField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NODE_REMOVE_REQUEST}
 */
proto.NODE_REMOVE_REQUEST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NODE_REMOVE_REQUEST;
  return proto.NODE_REMOVE_REQUEST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NODE_REMOVE_REQUEST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NODE_REMOVE_REQUEST}
 */
proto.NODE_REMOVE_REQUEST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addIds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NODE_REMOVE_REQUEST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NODE_REMOVE_REQUEST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NODE_REMOVE_REQUEST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_REMOVE_REQUEST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string ids = 1;
 * @return {!Array.<string>}
 */
proto.NODE_REMOVE_REQUEST.prototype.getIdsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.NODE_REMOVE_REQUEST.prototype.setIdsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.NODE_REMOVE_REQUEST.prototype.addIds = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.NODE_REMOVE_REQUEST.prototype.clearIdsList = function() {
  this.setIdsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NODE_REMOVE_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NODE_REMOVE_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NODE_REMOVE_RESPONSE.displayName = 'proto.NODE_REMOVE_RESPONSE';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NODE_REMOVE_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.NODE_REMOVE_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NODE_REMOVE_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_REMOVE_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NODE_REMOVE_RESPONSE}
 */
proto.NODE_REMOVE_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NODE_REMOVE_RESPONSE;
  return proto.NODE_REMOVE_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NODE_REMOVE_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NODE_REMOVE_RESPONSE}
 */
proto.NODE_REMOVE_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NODE_REMOVE_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NODE_REMOVE_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NODE_REMOVE_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_REMOVE_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
};


/**
 * required BaseResponse baseResponse = 1;
 * @return {!proto.BaseResponse}
 */
proto.NODE_REMOVE_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{!proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1, 1));
};


/** @param {!proto.BaseResponse} value */
proto.NODE_REMOVE_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.NODE_REMOVE_RESPONSE.prototype.clearBaseresponse = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_REMOVE_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NODE_LIST_REQUEST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NODE_LIST_REQUEST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NODE_LIST_REQUEST.displayName = 'proto.NODE_LIST_REQUEST';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NODE_LIST_REQUEST.prototype.toObject = function(opt_includeInstance) {
  return proto.NODE_LIST_REQUEST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NODE_LIST_REQUEST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_LIST_REQUEST.toObject = function(includeInstance, msg) {
  var f, obj = {
    method: jspb.Message.getField(msg, 1),
    protocol: jspb.Message.getField(msg, 2),
    obfs: jspb.Message.getField(msg, 3),
    address: jspb.Message.getField(msg, 4),
    id: jspb.Message.getField(msg, 5),
    city: jspb.Message.getField(msg, 6),
    country: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NODE_LIST_REQUEST}
 */
proto.NODE_LIST_REQUEST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NODE_LIST_REQUEST;
  return proto.NODE_LIST_REQUEST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NODE_LIST_REQUEST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NODE_LIST_REQUEST}
 */
proto.NODE_LIST_REQUEST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethod(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProtocol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setObfs(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NODE_LIST_REQUEST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NODE_LIST_REQUEST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NODE_LIST_REQUEST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_LIST_REQUEST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string method = 1;
 * @return {string}
 */
proto.NODE_LIST_REQUEST.prototype.getMethod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.NODE_LIST_REQUEST.prototype.setMethod = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.NODE_LIST_REQUEST.prototype.clearMethod = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_LIST_REQUEST.prototype.hasMethod = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string protocol = 2;
 * @return {string}
 */
proto.NODE_LIST_REQUEST.prototype.getProtocol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.NODE_LIST_REQUEST.prototype.setProtocol = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.NODE_LIST_REQUEST.prototype.clearProtocol = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_LIST_REQUEST.prototype.hasProtocol = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string obfs = 3;
 * @return {string}
 */
proto.NODE_LIST_REQUEST.prototype.getObfs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.NODE_LIST_REQUEST.prototype.setObfs = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.NODE_LIST_REQUEST.prototype.clearObfs = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_LIST_REQUEST.prototype.hasObfs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string address = 4;
 * @return {string}
 */
proto.NODE_LIST_REQUEST.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.NODE_LIST_REQUEST.prototype.setAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.NODE_LIST_REQUEST.prototype.clearAddress = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_LIST_REQUEST.prototype.hasAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string id = 5;
 * @return {string}
 */
proto.NODE_LIST_REQUEST.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.NODE_LIST_REQUEST.prototype.setId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.NODE_LIST_REQUEST.prototype.clearId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_LIST_REQUEST.prototype.hasId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string city = 6;
 * @return {string}
 */
proto.NODE_LIST_REQUEST.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.NODE_LIST_REQUEST.prototype.setCity = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.NODE_LIST_REQUEST.prototype.clearCity = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_LIST_REQUEST.prototype.hasCity = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string country = 7;
 * @return {string}
 */
proto.NODE_LIST_REQUEST.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.NODE_LIST_REQUEST.prototype.setCountry = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.NODE_LIST_REQUEST.prototype.clearCountry = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_LIST_REQUEST.prototype.hasCountry = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NODE_LIST_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.NODE_LIST_RESPONSE.repeatedFields_, null);
};
goog.inherits(proto.NODE_LIST_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NODE_LIST_RESPONSE.displayName = 'proto.NODE_LIST_RESPONSE';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.NODE_LIST_RESPONSE.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NODE_LIST_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.NODE_LIST_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NODE_LIST_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_LIST_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f),
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.Node.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NODE_LIST_RESPONSE}
 */
proto.NODE_LIST_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NODE_LIST_RESPONSE;
  return proto.NODE_LIST_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NODE_LIST_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NODE_LIST_RESPONSE}
 */
proto.NODE_LIST_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    case 2:
      var value = new proto.Node;
      reader.readMessage(value,proto.Node.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NODE_LIST_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NODE_LIST_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NODE_LIST_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NODE_LIST_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Node.serializeBinaryToWriter
    );
  }
};


/**
 * required BaseResponse baseResponse = 1;
 * @return {!proto.BaseResponse}
 */
proto.NODE_LIST_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{!proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1, 1));
};


/** @param {!proto.BaseResponse} value */
proto.NODE_LIST_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.NODE_LIST_RESPONSE.prototype.clearBaseresponse = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NODE_LIST_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Node nodes = 2;
 * @return {!Array.<!proto.Node>}
 */
proto.NODE_LIST_RESPONSE.prototype.getNodesList = function() {
  return /** @type{!Array.<!proto.Node>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Node, 2));
};


/** @param {!Array.<!proto.Node>} value */
proto.NODE_LIST_RESPONSE.prototype.setNodesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Node=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Node}
 */
proto.NODE_LIST_RESPONSE.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Node, opt_index);
};


proto.NODE_LIST_RESPONSE.prototype.clearNodesList = function() {
  this.setNodesList([]);
};


goog.object.extend(exports, proto);
