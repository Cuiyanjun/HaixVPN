/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var common_pb = require('./common_pb.js');
goog.exportSymbol('proto.DEVICE_DELETE_REQUEST', null, global);
goog.exportSymbol('proto.DEVICE_DELETE_RESPONSE', null, global);
goog.exportSymbol('proto.DEVICE_REGISTER_REQUEST', null, global);
goog.exportSymbol('proto.DEVICE_REGISTER_RESPONSE', null, global);
goog.exportSymbol('proto.DEVICE_UPDATE_REQUEST', null, global);
goog.exportSymbol('proto.DEVICE_UPDATE_RESPONSE', null, global);
goog.exportSymbol('proto.DeviceProto', null, global);
goog.exportSymbol('proto.INIT_RESPONSE', null, global);
goog.exportSymbol('proto.MessageNotifyRequest', null, global);
goog.exportSymbol('proto.MessageSendRequest', null, global);
goog.exportSymbol('proto.NEED_REGISTER_DEVICE_RESPONSE', null, global);
goog.exportSymbol('proto.UserProto', null, global);
goog.exportSymbol('proto.UserRegisterRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserRegisterRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserRegisterRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserRegisterRequest.displayName = 'proto.UserRegisterRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserRegisterRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.UserRegisterRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserRegisterRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserRegisterRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    username: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserRegisterRequest}
 */
proto.UserRegisterRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserRegisterRequest;
  return proto.UserRegisterRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserRegisterRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserRegisterRequest}
 */
proto.UserRegisterRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserRegisterRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserRegisterRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserRegisterRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserRegisterRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string username = 1;
 * @return {string}
 */
proto.UserRegisterRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.UserRegisterRequest.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UserRegisterRequest.prototype.clearUsername = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserRegisterRequest.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageSendRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.MessageSendRequest.repeatedFields_, null);
};
goog.inherits(proto.MessageSendRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageSendRequest.displayName = 'proto.MessageSendRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.MessageSendRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageSendRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageSendRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageSendRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageSendRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetsList: jspb.Message.getRepeatedField(msg, 1),
    message: (f = msg.getMessage()) && common_pb.MessageInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageSendRequest}
 */
proto.MessageSendRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageSendRequest;
  return proto.MessageSendRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageSendRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageSendRequest}
 */
proto.MessageSendRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addTargets(value);
      break;
    case 2:
      var value = new common_pb.MessageInfo;
      reader.readMessage(value,common_pb.MessageInfo.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageSendRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageSendRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageSendRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageSendRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.MessageInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated string targets = 1;
 * @return {!Array.<string>}
 */
proto.MessageSendRequest.prototype.getTargetsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<string>} value */
proto.MessageSendRequest.prototype.setTargetsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.MessageSendRequest.prototype.addTargets = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.MessageSendRequest.prototype.clearTargetsList = function() {
  this.setTargetsList([]);
};


/**
 * optional MessageInfo message = 2;
 * @return {?proto.MessageInfo}
 */
proto.MessageSendRequest.prototype.getMessage = function() {
  return /** @type{?proto.MessageInfo} */ (
    jspb.Message.getWrapperField(this, common_pb.MessageInfo, 2));
};


/** @param {?proto.MessageInfo|undefined} value */
proto.MessageSendRequest.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.MessageSendRequest.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageSendRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MessageNotifyRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MessageNotifyRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.MessageNotifyRequest.displayName = 'proto.MessageNotifyRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MessageNotifyRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.MessageNotifyRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MessageNotifyRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageNotifyRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: (f = msg.getMessage()) && common_pb.MessageInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MessageNotifyRequest}
 */
proto.MessageNotifyRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MessageNotifyRequest;
  return proto.MessageNotifyRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MessageNotifyRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MessageNotifyRequest}
 */
proto.MessageNotifyRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.MessageInfo;
      reader.readMessage(value,common_pb.MessageInfo.deserializeBinaryFromReader);
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MessageNotifyRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MessageNotifyRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MessageNotifyRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MessageNotifyRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.MessageInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional MessageInfo message = 1;
 * @return {?proto.MessageInfo}
 */
proto.MessageNotifyRequest.prototype.getMessage = function() {
  return /** @type{?proto.MessageInfo} */ (
    jspb.Message.getWrapperField(this, common_pb.MessageInfo, 1));
};


/** @param {?proto.MessageInfo|undefined} value */
proto.MessageNotifyRequest.prototype.setMessage = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.MessageNotifyRequest.prototype.clearMessage = function() {
  this.setMessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.MessageNotifyRequest.prototype.hasMessage = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeviceProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeviceProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeviceProto.displayName = 'proto.DeviceProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeviceProto.prototype.toObject = function(opt_includeInstance) {
  return proto.DeviceProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeviceProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getField(msg, 1),
    userId: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3),
    appVersion: jspb.Message.getField(msg, 4),
    deviceName: jspb.Message.getField(msg, 5),
    deviceOs: jspb.Message.getField(msg, 6),
    deviceType: jspb.Message.getField(msg, 7),
    ip: jspb.Message.getField(msg, 8),
    location: jspb.Message.getField(msg, 9),
    isp: jspb.Message.getField(msg, 10),
    netStatus: jspb.Message.getField(msg, 11),
    online: jspb.Message.getField(msg, 12),
    lastCheck: jspb.Message.getField(msg, 13),
    lastLogin: jspb.Message.getField(msg, 14),
    created: jspb.Message.getField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeviceProto}
 */
proto.DeviceProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeviceProto;
  return proto.DeviceProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeviceProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeviceProto}
 */
proto.DeviceProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceOs(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setIsp(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetStatus(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOnline(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastCheck(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLastLogin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeviceProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeviceProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeviceProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeviceProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeBool(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
};


/**
 * optional string device_id = 1;
 * @return {string}
 */
proto.DeviceProto.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DeviceProto.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DeviceProto.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.DeviceProto.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DeviceProto.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DeviceProto.prototype.clearUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 status = 3;
 * @return {number}
 */
proto.DeviceProto.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DeviceProto.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.DeviceProto.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string app_version = 4;
 * @return {string}
 */
proto.DeviceProto.prototype.getAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DeviceProto.prototype.setAppVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.DeviceProto.prototype.clearAppVersion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasAppVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string device_name = 5;
 * @return {string}
 */
proto.DeviceProto.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.DeviceProto.prototype.setDeviceName = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.DeviceProto.prototype.clearDeviceName = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasDeviceName = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 device_os = 6;
 * @return {number}
 */
proto.DeviceProto.prototype.getDeviceOs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.DeviceProto.prototype.setDeviceOs = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.DeviceProto.prototype.clearDeviceOs = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasDeviceOs = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 device_type = 7;
 * @return {number}
 */
proto.DeviceProto.prototype.getDeviceType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.DeviceProto.prototype.setDeviceType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.DeviceProto.prototype.clearDeviceType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasDeviceType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string ip = 8;
 * @return {string}
 */
proto.DeviceProto.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.DeviceProto.prototype.setIp = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.DeviceProto.prototype.clearIp = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasIp = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string location = 9;
 * @return {string}
 */
proto.DeviceProto.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.DeviceProto.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.DeviceProto.prototype.clearLocation = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string isp = 10;
 * @return {string}
 */
proto.DeviceProto.prototype.getIsp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.DeviceProto.prototype.setIsp = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.DeviceProto.prototype.clearIsp = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasIsp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string net_status = 11;
 * @return {string}
 */
proto.DeviceProto.prototype.getNetStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.DeviceProto.prototype.setNetStatus = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.DeviceProto.prototype.clearNetStatus = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasNetStatus = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool online = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeviceProto.prototype.getOnline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 12, false));
};


/** @param {boolean} value */
proto.DeviceProto.prototype.setOnline = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.DeviceProto.prototype.clearOnline = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasOnline = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 last_check = 13;
 * @return {number}
 */
proto.DeviceProto.prototype.getLastCheck = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.DeviceProto.prototype.setLastCheck = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.DeviceProto.prototype.clearLastCheck = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasLastCheck = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 last_login = 14;
 * @return {number}
 */
proto.DeviceProto.prototype.getLastLogin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.DeviceProto.prototype.setLastLogin = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.DeviceProto.prototype.clearLastLogin = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasLastLogin = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 created = 15;
 * @return {number}
 */
proto.DeviceProto.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.DeviceProto.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.DeviceProto.prototype.clearCreated = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DeviceProto.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.UserProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.UserProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.UserProto.displayName = 'proto.UserProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.UserProto.prototype.toObject = function(opt_includeInstance) {
  return proto.UserProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.UserProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    phone: jspb.Message.getField(msg, 2),
    nickname: jspb.Message.getField(msg, 3),
    status: jspb.Message.getField(msg, 4),
    role: jspb.Message.getField(msg, 5),
    created: jspb.Message.getField(msg, 6),
    remainTime: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.UserProto}
 */
proto.UserProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.UserProto;
  return proto.UserProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.UserProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.UserProto}
 */
proto.UserProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhone(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRole(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreated(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRemainTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.UserProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.UserProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.UserProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.UserProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.UserProto.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.UserProto.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.UserProto.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserProto.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phone = 2;
 * @return {string}
 */
proto.UserProto.prototype.getPhone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.UserProto.prototype.setPhone = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.UserProto.prototype.clearPhone = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserProto.prototype.hasPhone = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.UserProto.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.UserProto.prototype.setNickname = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.UserProto.prototype.clearNickname = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserProto.prototype.hasNickname = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 status = 4;
 * @return {number}
 */
proto.UserProto.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.UserProto.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.UserProto.prototype.clearStatus = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserProto.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 role = 5;
 * @return {number}
 */
proto.UserProto.prototype.getRole = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.UserProto.prototype.setRole = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.UserProto.prototype.clearRole = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserProto.prototype.hasRole = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 created = 6;
 * @return {number}
 */
proto.UserProto.prototype.getCreated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.UserProto.prototype.setCreated = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.UserProto.prototype.clearCreated = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserProto.prototype.hasCreated = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 remain_time = 7;
 * @return {number}
 */
proto.UserProto.prototype.getRemainTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.UserProto.prototype.setRemainTime = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.UserProto.prototype.clearRemainTime = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.UserProto.prototype.hasRemainTime = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.INIT_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.INIT_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.INIT_RESPONSE.displayName = 'proto.INIT_RESPONSE';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.INIT_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.INIT_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.INIT_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.INIT_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f),
    deviceresponse: (f = msg.getDeviceresponse()) && proto.DeviceProto.toObject(includeInstance, f),
    userresponse: (f = msg.getUserresponse()) && proto.UserProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.INIT_RESPONSE}
 */
proto.INIT_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.INIT_RESPONSE;
  return proto.INIT_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.INIT_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.INIT_RESPONSE}
 */
proto.INIT_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    case 2:
      var value = new proto.DeviceProto;
      reader.readMessage(value,proto.DeviceProto.deserializeBinaryFromReader);
      msg.setDeviceresponse(value);
      break;
    case 3:
      var value = new proto.UserProto;
      reader.readMessage(value,proto.UserProto.deserializeBinaryFromReader);
      msg.setUserresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.INIT_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.INIT_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.INIT_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.INIT_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
  f = message.getDeviceresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DeviceProto.serializeBinaryToWriter
    );
  }
  f = message.getUserresponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.UserProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional BaseResponse baseResponse = 1;
 * @return {?proto.BaseResponse}
 */
proto.INIT_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{?proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1));
};


/** @param {?proto.BaseResponse|undefined} value */
proto.INIT_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.INIT_RESPONSE.prototype.clearBaseresponse = function() {
  this.setBaseresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.INIT_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeviceProto deviceResponse = 2;
 * @return {?proto.DeviceProto}
 */
proto.INIT_RESPONSE.prototype.getDeviceresponse = function() {
  return /** @type{?proto.DeviceProto} */ (
    jspb.Message.getWrapperField(this, proto.DeviceProto, 2));
};


/** @param {?proto.DeviceProto|undefined} value */
proto.INIT_RESPONSE.prototype.setDeviceresponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.INIT_RESPONSE.prototype.clearDeviceresponse = function() {
  this.setDeviceresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.INIT_RESPONSE.prototype.hasDeviceresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UserProto userResponse = 3;
 * @return {?proto.UserProto}
 */
proto.INIT_RESPONSE.prototype.getUserresponse = function() {
  return /** @type{?proto.UserProto} */ (
    jspb.Message.getWrapperField(this, proto.UserProto, 3));
};


/** @param {?proto.UserProto|undefined} value */
proto.INIT_RESPONSE.prototype.setUserresponse = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.INIT_RESPONSE.prototype.clearUserresponse = function() {
  this.setUserresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.INIT_RESPONSE.prototype.hasUserresponse = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NEED_REGISTER_DEVICE_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NEED_REGISTER_DEVICE_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NEED_REGISTER_DEVICE_RESPONSE.displayName = 'proto.NEED_REGISTER_DEVICE_RESPONSE';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NEED_REGISTER_DEVICE_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.NEED_REGISTER_DEVICE_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NEED_REGISTER_DEVICE_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NEED_REGISTER_DEVICE_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NEED_REGISTER_DEVICE_RESPONSE}
 */
proto.NEED_REGISTER_DEVICE_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NEED_REGISTER_DEVICE_RESPONSE;
  return proto.NEED_REGISTER_DEVICE_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NEED_REGISTER_DEVICE_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NEED_REGISTER_DEVICE_RESPONSE}
 */
proto.NEED_REGISTER_DEVICE_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NEED_REGISTER_DEVICE_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NEED_REGISTER_DEVICE_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NEED_REGISTER_DEVICE_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NEED_REGISTER_DEVICE_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
};


/**
 * required BaseResponse baseResponse = 1;
 * @return {!proto.BaseResponse}
 */
proto.NEED_REGISTER_DEVICE_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{!proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1, 1));
};


/** @param {!proto.BaseResponse} value */
proto.NEED_REGISTER_DEVICE_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.NEED_REGISTER_DEVICE_RESPONSE.prototype.clearBaseresponse = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.NEED_REGISTER_DEVICE_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DEVICE_REGISTER_REQUEST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DEVICE_REGISTER_REQUEST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DEVICE_REGISTER_REQUEST.displayName = 'proto.DEVICE_REGISTER_REQUEST';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.toObject = function(opt_includeInstance) {
  return proto.DEVICE_REGISTER_REQUEST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DEVICE_REGISTER_REQUEST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_REGISTER_REQUEST.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getField(msg, 1),
    appVersion: jspb.Message.getField(msg, 2),
    deviceName: jspb.Message.getField(msg, 3),
    deviceOs: jspb.Message.getField(msg, 4),
    deviceType: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DEVICE_REGISTER_REQUEST}
 */
proto.DEVICE_REGISTER_REQUEST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DEVICE_REGISTER_REQUEST;
  return proto.DEVICE_REGISTER_REQUEST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DEVICE_REGISTER_REQUEST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DEVICE_REGISTER_REQUEST}
 */
proto.DEVICE_REGISTER_REQUEST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceOs(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DEVICE_REGISTER_REQUEST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DEVICE_REGISTER_REQUEST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_REGISTER_REQUEST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required string device_id = 1;
 * @return {string}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DEVICE_REGISTER_REQUEST.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DEVICE_REGISTER_REQUEST.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string app_version = 2;
 * @return {string}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.getAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DEVICE_REGISTER_REQUEST.prototype.setAppVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DEVICE_REGISTER_REQUEST.prototype.clearAppVersion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.hasAppVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string device_name = 3;
 * @return {string}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.DEVICE_REGISTER_REQUEST.prototype.setDeviceName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.DEVICE_REGISTER_REQUEST.prototype.clearDeviceName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.hasDeviceName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 device_os = 4;
 * @return {number}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.getDeviceOs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.DEVICE_REGISTER_REQUEST.prototype.setDeviceOs = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.DEVICE_REGISTER_REQUEST.prototype.clearDeviceOs = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.hasDeviceOs = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 device_type = 5;
 * @return {number}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.getDeviceType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.DEVICE_REGISTER_REQUEST.prototype.setDeviceType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.DEVICE_REGISTER_REQUEST.prototype.clearDeviceType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_REGISTER_REQUEST.prototype.hasDeviceType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DEVICE_REGISTER_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DEVICE_REGISTER_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DEVICE_REGISTER_RESPONSE.displayName = 'proto.DEVICE_REGISTER_RESPONSE';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DEVICE_REGISTER_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.DEVICE_REGISTER_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DEVICE_REGISTER_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_REGISTER_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f),
    deviceresponse: (f = msg.getDeviceresponse()) && proto.DeviceProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DEVICE_REGISTER_RESPONSE}
 */
proto.DEVICE_REGISTER_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DEVICE_REGISTER_RESPONSE;
  return proto.DEVICE_REGISTER_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DEVICE_REGISTER_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DEVICE_REGISTER_RESPONSE}
 */
proto.DEVICE_REGISTER_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    case 2:
      var value = new proto.DeviceProto;
      reader.readMessage(value,proto.DeviceProto.deserializeBinaryFromReader);
      msg.setDeviceresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DEVICE_REGISTER_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DEVICE_REGISTER_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DEVICE_REGISTER_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_REGISTER_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
  f = message.getDeviceresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DeviceProto.serializeBinaryToWriter
    );
  }
};


/**
 * required BaseResponse baseResponse = 1;
 * @return {!proto.BaseResponse}
 */
proto.DEVICE_REGISTER_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{!proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1, 1));
};


/** @param {!proto.BaseResponse} value */
proto.DEVICE_REGISTER_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DEVICE_REGISTER_RESPONSE.prototype.clearBaseresponse = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_REGISTER_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeviceProto deviceResponse = 2;
 * @return {?proto.DeviceProto}
 */
proto.DEVICE_REGISTER_RESPONSE.prototype.getDeviceresponse = function() {
  return /** @type{?proto.DeviceProto} */ (
    jspb.Message.getWrapperField(this, proto.DeviceProto, 2));
};


/** @param {?proto.DeviceProto|undefined} value */
proto.DEVICE_REGISTER_RESPONSE.prototype.setDeviceresponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DEVICE_REGISTER_RESPONSE.prototype.clearDeviceresponse = function() {
  this.setDeviceresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_REGISTER_RESPONSE.prototype.hasDeviceresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DEVICE_UPDATE_REQUEST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DEVICE_UPDATE_REQUEST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DEVICE_UPDATE_REQUEST.displayName = 'proto.DEVICE_UPDATE_REQUEST';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.toObject = function(opt_includeInstance) {
  return proto.DEVICE_UPDATE_REQUEST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DEVICE_UPDATE_REQUEST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_UPDATE_REQUEST.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getField(msg, 1),
    userId: jspb.Message.getField(msg, 2),
    status: jspb.Message.getField(msg, 3),
    appVersion: jspb.Message.getField(msg, 4),
    deviceName: jspb.Message.getField(msg, 5),
    deviceOs: jspb.Message.getField(msg, 6),
    deviceType: jspb.Message.getField(msg, 7),
    netStatus: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DEVICE_UPDATE_REQUEST}
 */
proto.DEVICE_UPDATE_REQUEST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DEVICE_UPDATE_REQUEST;
  return proto.DEVICE_UPDATE_REQUEST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DEVICE_UPDATE_REQUEST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DEVICE_UPDATE_REQUEST}
 */
proto.DEVICE_UPDATE_REQUEST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceName(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceOs(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDeviceType(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DEVICE_UPDATE_REQUEST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DEVICE_UPDATE_REQUEST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_UPDATE_REQUEST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * required string device_id = 1;
 * @return {string}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DEVICE_UPDATE_REQUEST.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DEVICE_UPDATE_REQUEST.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string user_id = 2;
 * @return {string}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DEVICE_UPDATE_REQUEST.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.DEVICE_UPDATE_REQUEST.prototype.clearUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 status = 3;
 * @return {number}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.DEVICE_UPDATE_REQUEST.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.DEVICE_UPDATE_REQUEST.prototype.clearStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string app_version = 4;
 * @return {string}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.getAppVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.DEVICE_UPDATE_REQUEST.prototype.setAppVersion = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.DEVICE_UPDATE_REQUEST.prototype.clearAppVersion = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.hasAppVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string device_name = 5;
 * @return {string}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.getDeviceName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.DEVICE_UPDATE_REQUEST.prototype.setDeviceName = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.DEVICE_UPDATE_REQUEST.prototype.clearDeviceName = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.hasDeviceName = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 device_os = 6;
 * @return {number}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.getDeviceOs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.DEVICE_UPDATE_REQUEST.prototype.setDeviceOs = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.DEVICE_UPDATE_REQUEST.prototype.clearDeviceOs = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.hasDeviceOs = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional uint32 device_type = 7;
 * @return {number}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.getDeviceType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.DEVICE_UPDATE_REQUEST.prototype.setDeviceType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.DEVICE_UPDATE_REQUEST.prototype.clearDeviceType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.hasDeviceType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string net_status = 8;
 * @return {string}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.getNetStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.DEVICE_UPDATE_REQUEST.prototype.setNetStatus = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.DEVICE_UPDATE_REQUEST.prototype.clearNetStatus = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_REQUEST.prototype.hasNetStatus = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DEVICE_UPDATE_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DEVICE_UPDATE_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DEVICE_UPDATE_RESPONSE.displayName = 'proto.DEVICE_UPDATE_RESPONSE';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DEVICE_UPDATE_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.DEVICE_UPDATE_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DEVICE_UPDATE_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_UPDATE_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f),
    deviceresponse: (f = msg.getDeviceresponse()) && proto.DeviceProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DEVICE_UPDATE_RESPONSE}
 */
proto.DEVICE_UPDATE_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DEVICE_UPDATE_RESPONSE;
  return proto.DEVICE_UPDATE_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DEVICE_UPDATE_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DEVICE_UPDATE_RESPONSE}
 */
proto.DEVICE_UPDATE_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    case 2:
      var value = new proto.DeviceProto;
      reader.readMessage(value,proto.DeviceProto.deserializeBinaryFromReader);
      msg.setDeviceresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DEVICE_UPDATE_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DEVICE_UPDATE_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DEVICE_UPDATE_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_UPDATE_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
  f = message.getDeviceresponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.DeviceProto.serializeBinaryToWriter
    );
  }
};


/**
 * required BaseResponse baseResponse = 1;
 * @return {!proto.BaseResponse}
 */
proto.DEVICE_UPDATE_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{!proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1, 1));
};


/** @param {!proto.BaseResponse} value */
proto.DEVICE_UPDATE_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DEVICE_UPDATE_RESPONSE.prototype.clearBaseresponse = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional DeviceProto deviceResponse = 2;
 * @return {?proto.DeviceProto}
 */
proto.DEVICE_UPDATE_RESPONSE.prototype.getDeviceresponse = function() {
  return /** @type{?proto.DeviceProto} */ (
    jspb.Message.getWrapperField(this, proto.DeviceProto, 2));
};


/** @param {?proto.DeviceProto|undefined} value */
proto.DEVICE_UPDATE_RESPONSE.prototype.setDeviceresponse = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.DEVICE_UPDATE_RESPONSE.prototype.clearDeviceresponse = function() {
  this.setDeviceresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_UPDATE_RESPONSE.prototype.hasDeviceresponse = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DEVICE_DELETE_REQUEST = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DEVICE_DELETE_REQUEST, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DEVICE_DELETE_REQUEST.displayName = 'proto.DEVICE_DELETE_REQUEST';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DEVICE_DELETE_REQUEST.prototype.toObject = function(opt_includeInstance) {
  return proto.DEVICE_DELETE_REQUEST.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DEVICE_DELETE_REQUEST} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_DELETE_REQUEST.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DEVICE_DELETE_REQUEST}
 */
proto.DEVICE_DELETE_REQUEST.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DEVICE_DELETE_REQUEST;
  return proto.DEVICE_DELETE_REQUEST.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DEVICE_DELETE_REQUEST} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DEVICE_DELETE_REQUEST}
 */
proto.DEVICE_DELETE_REQUEST.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DEVICE_DELETE_REQUEST.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DEVICE_DELETE_REQUEST.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DEVICE_DELETE_REQUEST} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_DELETE_REQUEST.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string device_id = 1;
 * @return {string}
 */
proto.DEVICE_DELETE_REQUEST.prototype.getDeviceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DEVICE_DELETE_REQUEST.prototype.setDeviceId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.DEVICE_DELETE_REQUEST.prototype.clearDeviceId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_DELETE_REQUEST.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DEVICE_DELETE_RESPONSE = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DEVICE_DELETE_RESPONSE, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DEVICE_DELETE_RESPONSE.displayName = 'proto.DEVICE_DELETE_RESPONSE';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DEVICE_DELETE_RESPONSE.prototype.toObject = function(opt_includeInstance) {
  return proto.DEVICE_DELETE_RESPONSE.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DEVICE_DELETE_RESPONSE} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_DELETE_RESPONSE.toObject = function(includeInstance, msg) {
  var f, obj = {
    baseresponse: (f = msg.getBaseresponse()) && common_pb.BaseResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DEVICE_DELETE_RESPONSE}
 */
proto.DEVICE_DELETE_RESPONSE.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DEVICE_DELETE_RESPONSE;
  return proto.DEVICE_DELETE_RESPONSE.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DEVICE_DELETE_RESPONSE} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DEVICE_DELETE_RESPONSE}
 */
proto.DEVICE_DELETE_RESPONSE.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_pb.BaseResponse;
      reader.readMessage(value,common_pb.BaseResponse.deserializeBinaryFromReader);
      msg.setBaseresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DEVICE_DELETE_RESPONSE.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DEVICE_DELETE_RESPONSE.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DEVICE_DELETE_RESPONSE} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DEVICE_DELETE_RESPONSE.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBaseresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_pb.BaseResponse.serializeBinaryToWriter
    );
  }
};


/**
 * required BaseResponse baseResponse = 1;
 * @return {!proto.BaseResponse}
 */
proto.DEVICE_DELETE_RESPONSE.prototype.getBaseresponse = function() {
  return /** @type{!proto.BaseResponse} */ (
    jspb.Message.getWrapperField(this, common_pb.BaseResponse, 1, 1));
};


/** @param {!proto.BaseResponse} value */
proto.DEVICE_DELETE_RESPONSE.prototype.setBaseresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.DEVICE_DELETE_RESPONSE.prototype.clearBaseresponse = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.DEVICE_DELETE_RESPONSE.prototype.hasBaseresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto);
